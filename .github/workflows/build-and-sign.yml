name: Build and Sign Windows App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-sign:
    permissions: write-all 
    runs-on: windows-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3'

      - name: Install pyinstaller and requests
        run: |
          pip install pyinstaller requests

      - name: Create Working Directory
        run: |
          mkdir build
          cd build
          echo "Working directory created."

      - name: Build the Executable
        run: |
          cd build
          pyinstaller --onefile ../echo_server.py

      - name: List Files in Build Directory
        run: |
          cd build
          dir

      - name: Prepare Files for Signing
        run: |
          mkdir files
          move build\dist\echo_server.exe files

      - name: Sign App
        uses: dlemstra/code-sign-action@v1
        with:
          certificate: '${{ secrets.PFX_CERTIFICATE }}'
          password: '${{ secrets.CERT_PASSWORD }}'
          folder: 'files'
          recursive: true
          description: 'EchoServerApp'

      - name: Upload Signed Executable as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: signed-echo-server
          path: files/echo_server.exe

      - name: Start Echo Server
        run: |
          Start-Process -FilePath 'files\echo_server.exe' -PassThru | Out-Null
          Start-Sleep -Seconds 5  # wait 5 seconds for the server to start

      - name: Run Tests on Executable
        id: run_tests_exe
        run: |
          # run the tests and capture the output
          python test_server_exe.py > result.log 2>&1 || true
          
          # store the content of the log file in a var
          $result = Get-Content result.log | Out-String
          
          # display the test output in the console
          echo "ðŸŽ‰ Executable Test output:"
          echo "$result" 

          # write the result to the env var
          echo "EXECUTABLE_TEST_RESULT<<EOF" >> $GITHUB_ENV
          echo "$result" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Stop Echo Server
        run: |
          taskkill /IM echo_server.exe /F || true

      - name: Run tests on Source Code
        id: run_tests_src
        run: |
          # run the tests and capture the output
          python3 -m unittest discover -s . -p "test_server.py" > result_source.log 2>&1 || true
          
          # store the content of the log file in a var
          $result = Get-Content result.log | Out-String

          # display the test output in the console
          echo "ðŸŽ‰ Source Code Test output:"
          echo "$result_src" 

          # write the result to the env var
          echo "SOURCE_CODE_TEST_RESULT<<EOF" >> $GITHUB_ENV
          echo "$result_src" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Debug Environment Variables
        run: |
          echo "Executable Test Result:"
          echo "${{ env.EXECUTABLE_TEST_RESULT }}"
          echo "Source Code Test Result:"
          echo "${{ env.SOURCE_CODE_TEST_RESULT }}"

      - name: Comment PR with test results
        if: always() && github.event_name == 'pull_request'
        uses: mshick/add-pr-comment@v2.8.2
        with:
          message: |
            ### ðŸš¦ Test Results
            **Executable Test Results:**
            ```
            ${{ env.EXECUTABLE_TEST_RESULT }}
            ```

            **Source Code Test Results:**
            ```
            ${{ env.SOURCE_CODE_TEST_RESULT }}
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Post Download Links for Artifacts
        if: success()
        uses: actions/github-script@v7.0.1
        with:
          script: |
            async function upsertComment(owner, repo, issue_number, purpose, body) {
              const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number });
              const marker = `<!-- bot: ${purpose} -->`;
              body = marker + "\n" + body;
              const existing = comments.filter((c) => c.body.includes(marker));
              if (existing.length > 0) {
                const last = existing[existing.length - 1];
                console.info(`Updating comment ${last.id}`);
                await github.rest.issues.updateComment({
                  owner, 
                  repo,
                  body,
                  comment_id: last.id,
                });
              } else {
                console.info(`Creating a comment in issue / PR #${issue_number}`);
                await github.rest.issues.createComment({ issue_number, body, owner, repo });
              }
            }
            const { owner, repo } = context.repo;
            const run_id = ${{ github.run_id }};
            const pull_requests = ${{ toJSON(github.event.pull_request) }};
            if (!pull_requests) {
              return core.error("This workflow doesn't match any pull requests!");
            }
            const artifacts = await github.paginate(
              github.rest.actions.listWorkflowRunArtifacts, 
              { owner, repo, run_id }
            );
            if (!artifacts.length) {
              return core.error(`No artifacts found`);
            }
            let body = `Download the signed Windows app installer for this pull request:\n`;
            for (const art of artifacts) {
              body += `\n* [${art.name}.zip](https://nightly.link/${owner}/${repo}/actions/artifacts/${art.id}.zip)`;
            }
            console.info("Review thread message body:", body);
            await upsertComment(owner, repo, pull_requests.number, "nightly-link", body);
